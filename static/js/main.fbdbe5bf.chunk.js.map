{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ws","Option","Select","App","props","inputChange","e","console","log","target","value","setState","message","timeChange","hour","handleChange","type","sendMsg","state","data","name","msg","send","JSON","stringify","warning","renderList","messageList","map","item","index","key","username","lastGistUrl","result","time","that","this","WebSocket","onopen","onmessage","tmp","parse","onclose","setTimeout","attend","axios","post","phone","password","then","catch","error","hashLat","parseInt","Math","random","hashLng","params","recordUserId","recordType","wifiName","recordLat","recordLng","recordRemark","address","url","headers","moduleRelaGrantUserId","enterpriseId","schemaName","version","res","Number","code","Date","toString","className","defaultValue","style","width","onChange","marginBottom","onClick","attendByHand","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbdbe5bf.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Button from 'antd/es/button'\nimport { Input, message, InputNumber, Select } from 'antd'\nimport axios from 'axios'\nimport './App.css';\nconst { Option } = Select;\nlet ws;\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {username: 'wyg', lastGistUrl: '', message: '', messageList: [], result: '未开始', time: '', hour: 0, type: '2'};\n  }\n\n  componentDidMount() {\n    const that = this;\n    ws = new WebSocket('ws://localhost:8080')\n    ws.onopen = function () {\n      console.log('服务器已连接')\n    }\n    ws.onmessage = function (msg) {\n      console.log(msg)\n      const tmp = JSON.parse(msg.data)\n      const data = `${tmp.name}:${tmp.msg}`\n      that.setState({\n        messageList: [...that.state.messageList, data]\n      })\n    }\n    ws.onclose = function () {\n      console.log('前端断开连接')\n    }\n\n\n\n\n    // console.log('component did mounted')\n    // // $.get('http://192.168.0.52:8082/cloud-wms/goodsType?enterpriseId=5bd65ecda4174ad3a85e4985d838eba4', (data) => {\n    // //   console.log(data)\n    // // })\n    // axios.get('http://192.168.0.52:8082/cloud-wms/goodsType?enterpriseId=5bd65ecda4174ad3a85e4985d838eba4').then(data => {\n    //   console.log(data);\n    // })\n  }\n\n  componentWillReceiveProps() {\n\n  }\n\n  attendByHand() {\n    const {hour} = this.state;\n    console.log('zhun bei daka')\n    this.setState({\n      result: '等待中...'\n    })\n    const time = 1000 * 60 * 60 * hour; // 计算小时\n    console.log(time);\n    setTimeout(() => {\n      this.attend();\n      // this.login();\n    }, time)\n  }\n\n  inputChange = (e) => {\n    console.log(e.target.value)\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  timeChange = (value) => {\n    console.log(value)\n    this.setState({\n      hour: value\n    })\n  }\n\n  /*\n  * 选择改变\n  * */\n  handleChange = (value) => {\n    console.log(value)\n    this.setState({\n      type: value\n    })\n  }\n\n\n  // 登录\n  login() {\n    const params = {\n      phone: '15295526117',\n      password: '96e79218965eb72c92a549dd5a330112'\n    }\n    const url = 'http://54.223.71.251:8083/cloud-user/login'\n    axios.post(url, params)\n      .then(data => {\n        console.log(data)\n      }).catch(error => {\n        console.log(error)\n    })\n  }\n\n  attend() {\n    let hashLat = parseInt(Math.random()*1000)\n    let hashLng = parseInt(Math.random()*1000)\n    hashLat = hashLat < 100 ? '0' + hashLat : hashLat;\n    hashLng = hashLng < 100 ? '0' + hashLng : hashLng;\n    const params = {\n      recordUserId: '2907ae6f08f9441c9da8fb635697b8e2',\n      recordType: this.state.type, // 1 上 2 下\n      wifiName: 'CFPU-NG-5G',\n      recordLat: '31.938' + hashLat,\n      recordLng: '118.832' + hashLng,\n      recordRemark: '',\n      address: '江苏省南京市江宁区庄排路157号'\n    };\n    const baseUrl = 'http://54.223.71.251:9083/cloud-attendance/attendRecord'\n    const url = `${baseUrl}?recordUserId=${params.recordUserId}&recordType=${params.recordType}&wifiName=${params.wifiName}&recordLng=${params.recordLng}&recordLat=${params.recordLat}&address=${params.address}`\n\n    axios.post(url, {}, {headers: {\n        moduleRelaGrantUserId: '2907ae6f08f9441c9da8fb635697b8e2',\n        enterpriseId: '5bd65ecda4174ad3a85e4985d838eba4',\n        schemaName: 'db2',\n        version: '7'\n      }})\n      .then(res => {\n        console.log(res);\n        if (Number(res.data.code) === 0) {\n          console.log('dakashijianshi:', new Date())\n          console.log('dakachenggong')\n          this.setState({\n            result: '完成',\n            time: new Date().toString()\n          })\n        } else {\n          console.log(res.msg);\n        }\n      })\n      .catch(error => {\n        console.error(error)\n      })\n  }\n\n  sendMsg = () => {\n    console.log(this.state.message)\n    if (!this.state.message) {\n      message.warning('打点什么再发送吧...')\n      return;\n    }\n    const data = {name: 'zs', msg: this.state.message}\n    ws.send(JSON.stringify(data))\n    this.setState({\n      message: ''\n    })\n  }\n\n  renderList = () => {\n    return (\n      this.state.messageList.map((item, index) => {\n        return (<p key={index}>{item}</p>)\n      })\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/*{this.renderList()}*/}\n          {/*<div>*/}\n            {/*<Input placeholder=\"Basic usage\" value={this.state.message} onChange={(e) =>this.inputChange(e)} />*/}\n            {/*<Button type=\"primary\" onClick={this.sendMsg}>send</Button>*/}\n          {/*</div>*/}\n            <Select defaultValue=\"lucy\" value={this.state.type} style={{ width: 120 }} onChange={this.handleChange}>\n              <Option value=\"1\">上</Option>\n              <Option value=\"2\">下</Option>\n            </Select>\n            <InputNumber value={this.state.hour} onChange={this.timeChange} style={{marginBottom: 10}} />\n            <Button type=\"primary\" onClick={this.attendByHand.bind(this)}>by yourself</Button>\n          {this.state.result}\n         {this.state.time}\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}